{"version":3,"sources":["components/Table.js","App.js","serviceWorker.js","index.js"],"names":["dataArr","dashboard","splice","Table","_ref","selectedOption","getColorTd","keyId","color","react_default","a","createElement","key","style","backgroundColor","taskArrObj","mentorStudents","studentsTasksArr","headArr","map","elem","value","mentorGitName","mentorTh","href","mentorGitLink","target","rel","label","push","students","studentTh","studentName","studentGit","mentorName","i","length","taskTdArr","taskTd","task","taskLink","j","status","studentTasks","includes","textAlign","className","options","App","state","handleChange","_this","setState","this","react_select_esm","onChange","src_components_Table","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c823e4e.chunk.js","sourcesContent":["import React from 'react';\n\nimport dashboard from '../xlsxToJson/dashboard.json';\nimport './Table.css';\n\nconst dataArr = dashboard.splice(0, 1);\n\nconst Table = ({ selectedOption }) => {\n  if (selectedOption !== null) {\n    const taskArrObj = dataArr[0];\n    let mentorStudents = ' ';\n    const studentsTasksArr = [];\n    const headArr = [];\n\n    dashboard.map(function(elem) {\n      if (selectedOption.value === elem.mentorGitName) {\n        return (mentorStudents = elem);\n      }\n      return elem;\n    });\n\n    const mentorTh = (\n      <th key={mentorStudents.mentorGitName}>\n        <a href={mentorStudents.mentorGitLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          Mentor: {selectedOption.label}\n        </a>\n      </th>\n    );\n\n    headArr.push(mentorTh);\n\n    mentorStudents.students.map(function(elem) {\n      const studentTh = (\n        <th key={elem.studentName}>\n          <a href={elem.studentGit} target=\"_blank\" rel=\"noopener noreferrer\">\n            {elem.studentName}\n          </a>\n        </th>\n      );\n      headArr.push(studentTh);\n      return elem;\n    });\n\n    studentsTasksArr.push(<tr key={mentorStudents.mentorName}>{headArr}</tr>);\n\n    function getColorTd(keyId, color) {\n      return <td key={keyId} style={{ backgroundColor: color }} />;\n    }\n\n    for (let i = 0; i < taskArrObj.length; i++) {\n      const taskTdArr = [];\n\n      const taskTd = (\n        <td key={taskArrObj[i].task}>\n          <a href={taskArrObj[i].taskLink} target=\"_blank\" rel=\"noopener noreferrer\">\n            {taskArrObj[i].task}\n          </a>\n        </td>\n      );\n\n      taskTdArr.push(taskTd);\n\n      for (let j = 0; j < mentorStudents.students.length; j++) {\n        let taskTd;\n        const key = mentorStudents.students[j].studentName + taskArrObj[i].status;\n\n        if (taskArrObj[i].status === 'In Progress') {\n          taskTd = getColorTd(key, 'rgb(255, 115, 0)');\n        }\n        if (\n          taskArrObj[i].status === 'Checking' &&\n          !mentorStudents.students[j].studentTasks.includes(taskArrObj[i].task)\n        ) {\n          taskTd = getColorTd(key, 'rgb(255, 179, 179)');\n        }\n\n        if (mentorStudents.students[j].studentTasks.includes(taskArrObj[i].task)) {\n          taskTd = getColorTd(key, 'rgba(4, 114, 0, 0.692)');\n        }\n\n        if (\n          taskArrObj[i].status === 'Checked' &&\n          !mentorStudents.students[j].studentTasks.includes(taskArrObj[i].task)\n        ) {\n          taskTd = getColorTd(key, 'rgb(255, 0, 0)');\n        }\n\n        if (taskArrObj[i].status === 'ToDo') {\n          taskTd = getColorTd(key, 'rgb(99, 99, 99)');\n        }\n\n        taskTdArr.push(taskTd);\n      }\n\n      studentsTasksArr.push(<tr key={taskArrObj[i].task}>{taskTdArr}</tr>);\n    }\n\n    studentsTasksArr.push(\n      <tr key=\"Legend\">\n        <th style={{ textAlign: 'center' }}>Legend</th>\n      </tr>\n    );\n    studentsTasksArr.push(\n      <tr key=\"gold\">\n        <td style={{ backgroundColor: 'rgb(255, 115, 0)' }} />\n        <td> - students working on that task now</td>\n      </tr>\n    );\n    studentsTasksArr.push(\n      <tr key=\"lightcoral\">\n        <td style={{ backgroundColor: 'rgb(255, 179, 179)' }} />\n        <td> - need to check</td>\n      </tr>\n    );\n    studentsTasksArr.push(\n      <tr key=\"green\">\n        <td style={{ backgroundColor: 'rgba(4, 114, 0, 0.692)' }} />\n        <td> - checked by mentor</td>\n      </tr>\n    );\n    studentsTasksArr.push(\n      <tr key=\"maroon\">\n        <td style={{ backgroundColor: 'rgb(255, 0, 0)' }} />\n        <td> - time to checking is gone and no mark from mentor</td>\n      </tr>\n    );\n    studentsTasksArr.push(\n      <tr key=\"grey\">\n        <td style={{ backgroundColor: 'rgb(99, 99, 99)' }} />\n        <td> - task in todo state</td>\n      </tr>\n    );\n\n    return (\n      <table className=\"tableDashboard\">\n        <tbody key=\"studentsTasks\">{studentsTasksArr}</tbody>\n      </table>\n    );\n  } else return null;\n};\n\nexport default Table;\n","import React from 'react';\nimport Select from 'react-select';\n\nimport dashboard from './xlsxToJson/dashboard.json';\nimport Table from './components/Table';\nimport './App.css';\n\nconst options = dashboard.map(function(elem) {\n  const objElem = {\n    value: elem.mentorGitName,\n    label: elem.mentorGitName + ' (' + elem.mentorName + ')',\n  };\n  return objElem;\n});\n\nclass App extends React.Component {\n  state = {\n    selectedOption: null,\n  };\n\n  handleChange = selectedOption => {\n    this.setState({ selectedOption });\n  };\n\n  render() {\n    const { selectedOption } = this.state;\n\n    return (\n      <div className=\"mainContainer\">\n        <h1>Enter your GitHub login</h1>\n        <Select\n          className=\"select\"\n          value={selectedOption}\n          onChange={this.handleChange}\n          options={options}\n        />\n        <Table selectedOption={selectedOption} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}